<control-adapter
    xmlns="http://www.sorbonne-universite.fr/alasca/control-adapter"
    uid="1LF"
    offered="equipments.Fridge.FridgeExternalControlCI">
  <consumption nominal="2000" min="0" max="2000"/>
  <required>java.lang.Math</required>
  <instance-var modifiers= "protected static" type="int" name="MAX_MODE"
                static-init="6"/>
  <instance-var modifiers= "protected static" type="double"
                name="MIN_ADMISSIBLE_COOLER_TEMP" static-init="0.0"/>
  <instance-var modifiers= "protected static" type="double"
                name="MAX_ADMISSIBLE_COOLER_DELTA" static-init="15.0"/>
  <instance-var modifiers= "protected static" type="double"
                name="MIN_ADMISSIBLE_FREEZER_TEMP" static-init="-25.0"/>
  <instance-var modifiers= "protected static" type="double"
                name="MAX_ADMISSIBLE_FREEZER_DELTA" static-init="0.0"/>
  <instance-var modifiers= "protected" type="int" name="currentMode"
                static-init="MAX_MODE"/>
  <instance-var modifiers= "protected" type="boolean" name="isSuspended"
                static-init="false"/>
  <internal modifiers= "protected" type="void"
	            name="computeAndSetNewPowerLevel">
	    <parameter type="int" name="newMode"/>
	    <thrown>java.lang.Exception</thrown>
	    <body equipmentRef="fridge">
	      double maxPowerLevel = fridge.getMaxPowerLevel();
	      double newPowerLevel = (newMode - 1) * maxPowerLevel/(MAX_MODE - 1);
	      heater.setCurrentPowerLevel(newPowerLevel);
	    </body>
  </internal>
  <operations>
	  <maxMode type="int"><body>return MAX_MODE;</body></maxMode>
	  <upMode type="boolean">
	    <body>
	      try {
	        computeAndSetNewPowerLevel(currentMode + 1);
	        currentMode++;
	      } catch(Exception e) {
	        return false;
	      }
	      return true;
	    </body>
	  </upMode>
	  <downMode type="boolean">
	    <body>
	      try {
	        computeAndSetNewPowerLevel(currentMode - 1);
	        currentMode--;
	      } catch(Exception e) {
	        return false;
	      }
	      return true;
	    </body>
	  </downMode>
	  <setMode type="boolean">
	    <parameter name="modeIndex"/>
	    <body>
	      try {
	        computeAndSetNewPowerLevel(modeIndex);
	        currentMode = modeIndex;
	      } catch(Exception e) {
	        return false;
	      }
	      return true;
	    </body>
	  </setMode>
	  <currentMode type="int">
	    <body>
	      if (suspended()) {
	        return 0;
	      } else {
	        return currentMode;
	      }
	    </body>
	  </currentMode>
	  <suspended type="boolean">
	    <body>
	      return isSuspended;
	    </body>
	  </suspended>
	  <suspend type="boolean">
	    <body equipmentRef="Fridge">
	      try {
	        Frige.setCurrentPowerLevel(0.0);
	        isSuspended = true;
	      } catch(Exception e) {
	        return false;
	      }
	      return true;
	    </body>
	  </suspend>
	  <resume type="boolean">
	    <body equipmentRef="Fridge">
	      try {
	        computeAndSetNewPowerLevel(currentMode);
	        isSuspended = false;
	      } catch(Exception e) {
	        return false;
	      }
	      return true;
	    </body>
	  </resume>
	  <emergency type="double">
	    <body equipmentRef="Fridge">
	      double currentFreezerTemperature = Fridge.getCurrentFreezerTemperature();
	      double targetFreezerTemperature = Fridge.getTargetFreezerTemperature();
	      double currentCoolerTemperature = Fridge.getCurrentCoolerTemperature();
	      double targetCoolerTemperature = Fridge.getTargetCoolerTemperature();
	      double deltaCooler = Math.abs(targetCoolerTemperature - currentCoolerTemperature);
	      double deltaFeezer = Math.abs(targetFreezerTemperature - currentFreezerTemperature);
	      double ret = -1.0;
	      if (currentCoolerTemperature &lt; MIN_ADMISSIBLE_COOLER_TEMP ||
	                                    delta &gt;= MAX_ADMISSIBLE_COOLER_DELTA) {
	        ret = 1.0;
	      } else if (currentFreezerTemperature &lt; MIN_ADMISSIBLE_FREEZER_TEMP ||
	                                    delta &gt;= MAX_ADMISSIBLE_FREEZER_DELTA) {
	        ret = 1.0;
	      } else {
	        ret = delta/MAX_ADMISSIBLE_DELTA;
	      }
	      return ret;
	    </body>
	  </emergency>
  </operations>
</control-adapter>
